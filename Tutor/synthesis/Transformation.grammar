#reference 'file:Tutor.dll';
#reference 'file:IronPython.dll';

using Tutor;
using Tutor.synthesis;
using Tutor.Transformation;
using IronPython.Compiler.Ast;

using semantics Tutor.Transformation.Semantics;
using learners Tutor.Transformation.WitnessFunctions;

language Transformation;	

@complete feature double Score = RankingScore;

@start IEnumerable<PythonNode> transformation:= Selected(match, nodes) = Filter(\x : PythonNode => match,nodes); 
bool match := Match(x, pattern);
Pattern pattern := Context(k, patternExp, path);
TreeTemplate patternExp := Pattern(token, tchildren) | LeafPattern(token); 
TreeTemplate token := Type(type) | Node(info); 
Path path := Path(k);
IEnumerable<TreeTemplate> tchildren := TChild(patternExp) | TChildren(patternExp, tchildren);
IEnumerable<PythonNode> nodes := InOrderSort(ast);

@input PythonNode ast;
NodeInfo info; 
int k;
string type;
dynamic value;


