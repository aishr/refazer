//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ECMAScriptCSharpTarget.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="ECMAScriptCSharpTargetParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public interface IECMAScriptCSharpTargetListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] ECMAScriptCSharpTargetParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] ECMAScriptCSharpTargetParser.ProgramContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.sourceElements"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSourceElements([NotNull] ECMAScriptCSharpTargetParser.SourceElementsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.sourceElements"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSourceElements([NotNull] ECMAScriptCSharpTargetParser.SourceElementsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.sourceElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSourceElement([NotNull] ECMAScriptCSharpTargetParser.SourceElementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.sourceElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSourceElement([NotNull] ECMAScriptCSharpTargetParser.SourceElementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] ECMAScriptCSharpTargetParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] ECMAScriptCSharpTargetParser.StatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlock([NotNull] ECMAScriptCSharpTargetParser.BlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlock([NotNull] ECMAScriptCSharpTargetParser.BlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.statementList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatementList([NotNull] ECMAScriptCSharpTargetParser.StatementListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.statementList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatementList([NotNull] ECMAScriptCSharpTargetParser.StatementListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.variableStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableStatement([NotNull] ECMAScriptCSharpTargetParser.VariableStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.variableStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableStatement([NotNull] ECMAScriptCSharpTargetParser.VariableStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.variableDeclarationList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableDeclarationList([NotNull] ECMAScriptCSharpTargetParser.VariableDeclarationListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.variableDeclarationList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableDeclarationList([NotNull] ECMAScriptCSharpTargetParser.VariableDeclarationListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.variableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableDeclaration([NotNull] ECMAScriptCSharpTargetParser.VariableDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.variableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableDeclaration([NotNull] ECMAScriptCSharpTargetParser.VariableDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.initialiser"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInitialiser([NotNull] ECMAScriptCSharpTargetParser.InitialiserContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.initialiser"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInitialiser([NotNull] ECMAScriptCSharpTargetParser.InitialiserContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.emptyStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEmptyStatement([NotNull] ECMAScriptCSharpTargetParser.EmptyStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.emptyStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEmptyStatement([NotNull] ECMAScriptCSharpTargetParser.EmptyStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.expressionStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionStatement([NotNull] ECMAScriptCSharpTargetParser.ExpressionStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.expressionStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionStatement([NotNull] ECMAScriptCSharpTargetParser.ExpressionStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] ECMAScriptCSharpTargetParser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] ECMAScriptCSharpTargetParser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DoStatement</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDoStatement([NotNull] ECMAScriptCSharpTargetParser.DoStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DoStatement</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDoStatement([NotNull] ECMAScriptCSharpTargetParser.DoStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>WhileStatement</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileStatement([NotNull] ECMAScriptCSharpTargetParser.WhileStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>WhileStatement</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileStatement([NotNull] ECMAScriptCSharpTargetParser.WhileStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ForStatement</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForStatement([NotNull] ECMAScriptCSharpTargetParser.ForStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ForStatement</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForStatement([NotNull] ECMAScriptCSharpTargetParser.ForStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ForVarStatement</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForVarStatement([NotNull] ECMAScriptCSharpTargetParser.ForVarStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ForVarStatement</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForVarStatement([NotNull] ECMAScriptCSharpTargetParser.ForVarStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ForInStatement</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForInStatement([NotNull] ECMAScriptCSharpTargetParser.ForInStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ForInStatement</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForInStatement([NotNull] ECMAScriptCSharpTargetParser.ForInStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ForVarInStatement</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForVarInStatement([NotNull] ECMAScriptCSharpTargetParser.ForVarInStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ForVarInStatement</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForVarInStatement([NotNull] ECMAScriptCSharpTargetParser.ForVarInStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.continueStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterContinueStatement([NotNull] ECMAScriptCSharpTargetParser.ContinueStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.continueStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitContinueStatement([NotNull] ECMAScriptCSharpTargetParser.ContinueStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.breakStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBreakStatement([NotNull] ECMAScriptCSharpTargetParser.BreakStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.breakStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBreakStatement([NotNull] ECMAScriptCSharpTargetParser.BreakStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnStatement([NotNull] ECMAScriptCSharpTargetParser.ReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnStatement([NotNull] ECMAScriptCSharpTargetParser.ReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.withStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWithStatement([NotNull] ECMAScriptCSharpTargetParser.WithStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.withStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWithStatement([NotNull] ECMAScriptCSharpTargetParser.WithStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.switchStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitchStatement([NotNull] ECMAScriptCSharpTargetParser.SwitchStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.switchStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitchStatement([NotNull] ECMAScriptCSharpTargetParser.SwitchStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.caseBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCaseBlock([NotNull] ECMAScriptCSharpTargetParser.CaseBlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.caseBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCaseBlock([NotNull] ECMAScriptCSharpTargetParser.CaseBlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.caseClauses"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCaseClauses([NotNull] ECMAScriptCSharpTargetParser.CaseClausesContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.caseClauses"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCaseClauses([NotNull] ECMAScriptCSharpTargetParser.CaseClausesContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.caseClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCaseClause([NotNull] ECMAScriptCSharpTargetParser.CaseClauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.caseClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCaseClause([NotNull] ECMAScriptCSharpTargetParser.CaseClauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.defaultClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDefaultClause([NotNull] ECMAScriptCSharpTargetParser.DefaultClauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.defaultClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDefaultClause([NotNull] ECMAScriptCSharpTargetParser.DefaultClauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.labelledStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLabelledStatement([NotNull] ECMAScriptCSharpTargetParser.LabelledStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.labelledStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLabelledStatement([NotNull] ECMAScriptCSharpTargetParser.LabelledStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.throwStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterThrowStatement([NotNull] ECMAScriptCSharpTargetParser.ThrowStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.throwStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitThrowStatement([NotNull] ECMAScriptCSharpTargetParser.ThrowStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.tryStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTryStatement([NotNull] ECMAScriptCSharpTargetParser.TryStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.tryStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTryStatement([NotNull] ECMAScriptCSharpTargetParser.TryStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.catchProduction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCatchProduction([NotNull] ECMAScriptCSharpTargetParser.CatchProductionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.catchProduction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCatchProduction([NotNull] ECMAScriptCSharpTargetParser.CatchProductionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.finallyProduction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFinallyProduction([NotNull] ECMAScriptCSharpTargetParser.FinallyProductionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.finallyProduction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFinallyProduction([NotNull] ECMAScriptCSharpTargetParser.FinallyProductionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.debuggerStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDebuggerStatement([NotNull] ECMAScriptCSharpTargetParser.DebuggerStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.debuggerStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDebuggerStatement([NotNull] ECMAScriptCSharpTargetParser.DebuggerStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.functionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionDeclaration([NotNull] ECMAScriptCSharpTargetParser.FunctionDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.functionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionDeclaration([NotNull] ECMAScriptCSharpTargetParser.FunctionDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.formalParameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFormalParameterList([NotNull] ECMAScriptCSharpTargetParser.FormalParameterListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.formalParameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFormalParameterList([NotNull] ECMAScriptCSharpTargetParser.FormalParameterListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.functionBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionBody([NotNull] ECMAScriptCSharpTargetParser.FunctionBodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.functionBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionBody([NotNull] ECMAScriptCSharpTargetParser.FunctionBodyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.arrayLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayLiteral([NotNull] ECMAScriptCSharpTargetParser.ArrayLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.arrayLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayLiteral([NotNull] ECMAScriptCSharpTargetParser.ArrayLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.elementList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElementList([NotNull] ECMAScriptCSharpTargetParser.ElementListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.elementList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElementList([NotNull] ECMAScriptCSharpTargetParser.ElementListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.elision"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElision([NotNull] ECMAScriptCSharpTargetParser.ElisionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.elision"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElision([NotNull] ECMAScriptCSharpTargetParser.ElisionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.objectLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterObjectLiteral([NotNull] ECMAScriptCSharpTargetParser.ObjectLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.objectLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitObjectLiteral([NotNull] ECMAScriptCSharpTargetParser.ObjectLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.propertyNameAndValueList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPropertyNameAndValueList([NotNull] ECMAScriptCSharpTargetParser.PropertyNameAndValueListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.propertyNameAndValueList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPropertyNameAndValueList([NotNull] ECMAScriptCSharpTargetParser.PropertyNameAndValueListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PropertyExpressionAssignment</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.propertyAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPropertyExpressionAssignment([NotNull] ECMAScriptCSharpTargetParser.PropertyExpressionAssignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PropertyExpressionAssignment</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.propertyAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPropertyExpressionAssignment([NotNull] ECMAScriptCSharpTargetParser.PropertyExpressionAssignmentContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PropertyGetter</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.propertyAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPropertyGetter([NotNull] ECMAScriptCSharpTargetParser.PropertyGetterContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PropertyGetter</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.propertyAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPropertyGetter([NotNull] ECMAScriptCSharpTargetParser.PropertyGetterContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PropertySetter</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.propertyAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPropertySetter([NotNull] ECMAScriptCSharpTargetParser.PropertySetterContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PropertySetter</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.propertyAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPropertySetter([NotNull] ECMAScriptCSharpTargetParser.PropertySetterContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.propertyName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPropertyName([NotNull] ECMAScriptCSharpTargetParser.PropertyNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.propertyName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPropertyName([NotNull] ECMAScriptCSharpTargetParser.PropertyNameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.propertySetParameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPropertySetParameterList([NotNull] ECMAScriptCSharpTargetParser.PropertySetParameterListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.propertySetParameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPropertySetParameterList([NotNull] ECMAScriptCSharpTargetParser.PropertySetParameterListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArguments([NotNull] ECMAScriptCSharpTargetParser.ArgumentsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArguments([NotNull] ECMAScriptCSharpTargetParser.ArgumentsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.argumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentList([NotNull] ECMAScriptCSharpTargetParser.ArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.argumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentList([NotNull] ECMAScriptCSharpTargetParser.ArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.expressionSequence"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionSequence([NotNull] ECMAScriptCSharpTargetParser.ExpressionSequenceContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.expressionSequence"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionSequence([NotNull] ECMAScriptCSharpTargetParser.ExpressionSequenceContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TernaryExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTernaryExpression([NotNull] ECMAScriptCSharpTargetParser.TernaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TernaryExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTernaryExpression([NotNull] ECMAScriptCSharpTargetParser.TernaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LogicalAndExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalAndExpression([NotNull] ECMAScriptCSharpTargetParser.LogicalAndExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LogicalAndExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalAndExpression([NotNull] ECMAScriptCSharpTargetParser.LogicalAndExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PreIncrementExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreIncrementExpression([NotNull] ECMAScriptCSharpTargetParser.PreIncrementExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PreIncrementExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreIncrementExpression([NotNull] ECMAScriptCSharpTargetParser.PreIncrementExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ObjectLiteralExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterObjectLiteralExpression([NotNull] ECMAScriptCSharpTargetParser.ObjectLiteralExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ObjectLiteralExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitObjectLiteralExpression([NotNull] ECMAScriptCSharpTargetParser.ObjectLiteralExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>InExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInExpression([NotNull] ECMAScriptCSharpTargetParser.InExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>InExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInExpression([NotNull] ECMAScriptCSharpTargetParser.InExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LogicalOrExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalOrExpression([NotNull] ECMAScriptCSharpTargetParser.LogicalOrExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LogicalOrExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalOrExpression([NotNull] ECMAScriptCSharpTargetParser.LogicalOrExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NotExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotExpression([NotNull] ECMAScriptCSharpTargetParser.NotExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NotExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotExpression([NotNull] ECMAScriptCSharpTargetParser.NotExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PreDecreaseExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreDecreaseExpression([NotNull] ECMAScriptCSharpTargetParser.PreDecreaseExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PreDecreaseExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreDecreaseExpression([NotNull] ECMAScriptCSharpTargetParser.PreDecreaseExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArgumentsExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentsExpression([NotNull] ECMAScriptCSharpTargetParser.ArgumentsExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArgumentsExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentsExpression([NotNull] ECMAScriptCSharpTargetParser.ArgumentsExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ThisExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterThisExpression([NotNull] ECMAScriptCSharpTargetParser.ThisExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ThisExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitThisExpression([NotNull] ECMAScriptCSharpTargetParser.ThisExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FunctionExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionExpression([NotNull] ECMAScriptCSharpTargetParser.FunctionExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FunctionExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionExpression([NotNull] ECMAScriptCSharpTargetParser.FunctionExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>UnaryMinusExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnaryMinusExpression([NotNull] ECMAScriptCSharpTargetParser.UnaryMinusExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>UnaryMinusExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnaryMinusExpression([NotNull] ECMAScriptCSharpTargetParser.UnaryMinusExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AssignmentExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignmentExpression([NotNull] ECMAScriptCSharpTargetParser.AssignmentExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AssignmentExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignmentExpression([NotNull] ECMAScriptCSharpTargetParser.AssignmentExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PostDecreaseExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPostDecreaseExpression([NotNull] ECMAScriptCSharpTargetParser.PostDecreaseExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PostDecreaseExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPostDecreaseExpression([NotNull] ECMAScriptCSharpTargetParser.PostDecreaseExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TypeofExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeofExpression([NotNull] ECMAScriptCSharpTargetParser.TypeofExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TypeofExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeofExpression([NotNull] ECMAScriptCSharpTargetParser.TypeofExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>InstanceofExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInstanceofExpression([NotNull] ECMAScriptCSharpTargetParser.InstanceofExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>InstanceofExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInstanceofExpression([NotNull] ECMAScriptCSharpTargetParser.InstanceofExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>UnaryPlusExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnaryPlusExpression([NotNull] ECMAScriptCSharpTargetParser.UnaryPlusExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>UnaryPlusExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnaryPlusExpression([NotNull] ECMAScriptCSharpTargetParser.UnaryPlusExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DeleteExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeleteExpression([NotNull] ECMAScriptCSharpTargetParser.DeleteExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DeleteExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeleteExpression([NotNull] ECMAScriptCSharpTargetParser.DeleteExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>EqualityExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEqualityExpression([NotNull] ECMAScriptCSharpTargetParser.EqualityExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>EqualityExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEqualityExpression([NotNull] ECMAScriptCSharpTargetParser.EqualityExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BitXOrExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBitXOrExpression([NotNull] ECMAScriptCSharpTargetParser.BitXOrExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BitXOrExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBitXOrExpression([NotNull] ECMAScriptCSharpTargetParser.BitXOrExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MultiplicativeExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiplicativeExpression([NotNull] ECMAScriptCSharpTargetParser.MultiplicativeExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MultiplicativeExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiplicativeExpression([NotNull] ECMAScriptCSharpTargetParser.MultiplicativeExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BitShiftExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBitShiftExpression([NotNull] ECMAScriptCSharpTargetParser.BitShiftExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BitShiftExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBitShiftExpression([NotNull] ECMAScriptCSharpTargetParser.BitShiftExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenthesizedExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesizedExpression([NotNull] ECMAScriptCSharpTargetParser.ParenthesizedExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenthesizedExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesizedExpression([NotNull] ECMAScriptCSharpTargetParser.ParenthesizedExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AdditiveExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAdditiveExpression([NotNull] ECMAScriptCSharpTargetParser.AdditiveExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AdditiveExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAdditiveExpression([NotNull] ECMAScriptCSharpTargetParser.AdditiveExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>RelationalExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRelationalExpression([NotNull] ECMAScriptCSharpTargetParser.RelationalExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>RelationalExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRelationalExpression([NotNull] ECMAScriptCSharpTargetParser.RelationalExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PostIncrementExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPostIncrementExpression([NotNull] ECMAScriptCSharpTargetParser.PostIncrementExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PostIncrementExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPostIncrementExpression([NotNull] ECMAScriptCSharpTargetParser.PostIncrementExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BitNotExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBitNotExpression([NotNull] ECMAScriptCSharpTargetParser.BitNotExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BitNotExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBitNotExpression([NotNull] ECMAScriptCSharpTargetParser.BitNotExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NewExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNewExpression([NotNull] ECMAScriptCSharpTargetParser.NewExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NewExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNewExpression([NotNull] ECMAScriptCSharpTargetParser.NewExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralExpression([NotNull] ECMAScriptCSharpTargetParser.LiteralExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralExpression([NotNull] ECMAScriptCSharpTargetParser.LiteralExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArrayLiteralExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayLiteralExpression([NotNull] ECMAScriptCSharpTargetParser.ArrayLiteralExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArrayLiteralExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayLiteralExpression([NotNull] ECMAScriptCSharpTargetParser.ArrayLiteralExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MemberDotExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMemberDotExpression([NotNull] ECMAScriptCSharpTargetParser.MemberDotExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MemberDotExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMemberDotExpression([NotNull] ECMAScriptCSharpTargetParser.MemberDotExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MemberIndexExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMemberIndexExpression([NotNull] ECMAScriptCSharpTargetParser.MemberIndexExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MemberIndexExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMemberIndexExpression([NotNull] ECMAScriptCSharpTargetParser.MemberIndexExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IdentifierExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierExpression([NotNull] ECMAScriptCSharpTargetParser.IdentifierExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IdentifierExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierExpression([NotNull] ECMAScriptCSharpTargetParser.IdentifierExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BitAndExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBitAndExpression([NotNull] ECMAScriptCSharpTargetParser.BitAndExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BitAndExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBitAndExpression([NotNull] ECMAScriptCSharpTargetParser.BitAndExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BitOrExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBitOrExpression([NotNull] ECMAScriptCSharpTargetParser.BitOrExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BitOrExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBitOrExpression([NotNull] ECMAScriptCSharpTargetParser.BitOrExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AssignmentOperatorExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignmentOperatorExpression([NotNull] ECMAScriptCSharpTargetParser.AssignmentOperatorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AssignmentOperatorExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignmentOperatorExpression([NotNull] ECMAScriptCSharpTargetParser.AssignmentOperatorExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>VoidExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVoidExpression([NotNull] ECMAScriptCSharpTargetParser.VoidExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>VoidExpression</c>
	/// labeled alternative in <see cref="ECMAScriptCSharpTargetParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVoidExpression([NotNull] ECMAScriptCSharpTargetParser.VoidExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.assignmentOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignmentOperator([NotNull] ECMAScriptCSharpTargetParser.AssignmentOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.assignmentOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignmentOperator([NotNull] ECMAScriptCSharpTargetParser.AssignmentOperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteral([NotNull] ECMAScriptCSharpTargetParser.LiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteral([NotNull] ECMAScriptCSharpTargetParser.LiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.numericLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumericLiteral([NotNull] ECMAScriptCSharpTargetParser.NumericLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.numericLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumericLiteral([NotNull] ECMAScriptCSharpTargetParser.NumericLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.identifierName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierName([NotNull] ECMAScriptCSharpTargetParser.IdentifierNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.identifierName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierName([NotNull] ECMAScriptCSharpTargetParser.IdentifierNameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.reservedWord"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReservedWord([NotNull] ECMAScriptCSharpTargetParser.ReservedWordContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.reservedWord"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReservedWord([NotNull] ECMAScriptCSharpTargetParser.ReservedWordContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterKeyword([NotNull] ECMAScriptCSharpTargetParser.KeywordContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitKeyword([NotNull] ECMAScriptCSharpTargetParser.KeywordContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.futureReservedWord"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFutureReservedWord([NotNull] ECMAScriptCSharpTargetParser.FutureReservedWordContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.futureReservedWord"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFutureReservedWord([NotNull] ECMAScriptCSharpTargetParser.FutureReservedWordContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.getter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGetter([NotNull] ECMAScriptCSharpTargetParser.GetterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.getter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGetter([NotNull] ECMAScriptCSharpTargetParser.GetterContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.setter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSetter([NotNull] ECMAScriptCSharpTargetParser.SetterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.setter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSetter([NotNull] ECMAScriptCSharpTargetParser.SetterContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.eos"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEos([NotNull] ECMAScriptCSharpTargetParser.EosContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.eos"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEos([NotNull] ECMAScriptCSharpTargetParser.EosContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.eof"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEof([NotNull] ECMAScriptCSharpTargetParser.EofContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ECMAScriptCSharpTargetParser.eof"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEof([NotNull] ECMAScriptCSharpTargetParser.EofContext context);
}
